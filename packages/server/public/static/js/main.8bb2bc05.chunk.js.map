{"version":3,"sources":["components/basic/Button.js","components/basic/Card.js","components/basic/Title.js","components/basic/Text.js","utils/useWeb3Wallet.js","components/basic/ErrorText.js","pages/ConnectWallet.js","components/PurchaseButton.js","utils/useChannel.js","utils/useChannelStatus.js","pages/ChannelDetail.js","utils/useIsWalletLinked.js","utils/useChannels.js","pages/Channels.js","pages/LinkWallet.js","pages/Dashboard.js","components/basic/ETHAddress.js","components/Header.js","App.js","index.js"],"names":["Button","className","linkButton","props","classList","type","Card","children","Title","Text","useWeb3Wallet","wallet","useWallet","useMemo","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","status","chainId","isConnected","Boolean","ErrorText","ConnectWallet","error","message","onClick","connect","networks","4","unlockAddress","PurchaseButton","lockAddress","afterPurchase","useState","setError","purchasing","setPurchasing","purchaseKey","a","walletService","WalletService","console","useChannel","channelId","channel","setChannel","loading","setLoading","reloadCounter","setReload","useEffect","fetch","account","resp","json","body","go","reload","Date","now","ChannelStatuses","useChannelStatus","UserKeys","length","userKey","keyExpiresAt","inviteLink","toISOString","ChannelDetail","match","params","shouldOpenInviteLink","setShouldOpenInviteLink","window","open","name","toLocaleString","href","target","rel","lockContract","useIsWalletLinked","linked","setLinked","walletLinked","useChannels","channels","setChannels","Channel","reloadChannels","Channels","map","id","LinkWallet","reloadStatus","linkCode","setLinkCode","saving","setSaving","interval","setInterval","clearInterval","linkWallet","e","preventDefault","signMessage","sign","method","headers","JSON","stringify","walletAddress","success","errors","get","code","onSubmit","placeholder","value","disabled","required","url","process","TELEGRAM_BOT_USERNAME","encodeURIComponent","Dashboard","ETHAddress","address","title","substr","Header","useRouteMatch","isExact","to","reset","App","path","component","exact","Providers","parseInt","NETWORK","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PAsBeA,EApBA,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,WAAeC,EAAY,0CAGhDC,EAAS,UAAMF,EAFR,yEACD,6DACG,YAAuCD,GAAwB,IAE9E,OAAIC,EAEA,+BAAGD,UAAWG,GAAeD,IAK/B,oCACEE,KAAK,SACLJ,UAAWG,GACPD,KCPKG,EARF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACd,OACE,qBAAKN,UAAU,2CAAf,SACGM,KCMQC,EATD,SAAC,GAA6B,IAA3BP,EAA0B,EAA1BA,UAAcE,EAAY,6BACzC,OACE,gCACEF,UAAS,gCAA2BA,IAChCE,KCKKM,EATF,SAAC,GAA6B,IAA3BR,EAA0B,EAA1BA,UAAcE,EAAY,6BACxC,OACE,+BACEF,UAAS,oCAA+BA,IACpCE,K,QCyBKO,EA1BO,WACpB,IAAMC,EAASC,cAEf,EAA6BC,mBAAQ,WACnC,IAAKF,EAAOG,SACV,MAAO,GAGT,IAAMC,EAAW,IAAIC,SAAOC,UAAUC,aAAaP,EAAOG,UACpDK,EAASJ,EAASK,YAExB,MAAO,CACLL,WACAI,YAED,CAACR,EAAOU,SAEX,MAAO,CACLN,SAfF,EAAQA,SAgBNI,OAhBF,EAAkBA,OAiBhBR,SACAW,QAASX,GAAUA,EAAOW,QAC1BC,YAAaC,QAAQb,GAA4B,cAAlBA,EAAOU,UCf3BI,EATG,SAAC,GAA6B,IAA3BxB,EAA0B,EAA1BA,UAAcE,EAAY,6BAC7C,OACE,cAAC,EAAD,aACEF,UAAS,uBAAkBA,IACvBE,KCsBKuB,EArBO,WACpB,IAAQf,EAAWD,IAAXC,OACR,OACE,sBAAKV,UAAU,2BAAf,UACE,cAAC,EAAD,CAAOA,UAAU,eAAjB,iCACA,eAAC,EAAD,WACE,cAAC,EAAD,0BACA,cAAC,EAAD,kDAEEU,EAAOgB,MACP,cAAC,EAAD,UAAYhB,EAAOgB,MAAMC,UADV,KAIjB,cAAC,EAAD,CAAQC,QAAS,kBAAMlB,EAAOmB,WAA9B,mC,uCCdFC,EAAW,CACfC,EAAG,CACDjB,SAAU,gEACVkB,cAAe,+CAwCJC,EApCQ,SAAC,GAAyD,IAAvDjC,EAAsD,EAAtDA,UAAWM,EAA2C,EAA3CA,SAAU4B,EAAiC,EAAjCA,YAAaC,EAAoB,EAApBA,cAC1D,EAA6B1B,IAArBK,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,OAClB,EAA0BkB,mBAAS,IAAnC,mBAAcC,GAAd,WACA,EAAoCD,oBAAS,GAA7C,mBAAOE,EAAP,KAAmBC,EAAnB,KAEMC,EAAW,uCAAG,4BAAAC,EAAA,6DAClBF,GAAc,GACdF,EAAS,MAFS,SAKVK,EAAgB,IAAIC,IAAcb,GALxB,SAOVY,EAAcb,QAAQf,EAAUI,GAPtB,uBASVwB,EAAcF,YAAY,CAC9BN,gBAVc,OAaZC,GACFA,IAdc,kDAiBhBS,QAAQlB,MAAR,MACAW,EAAS,wBAlBO,yBAoBhBE,GAAc,GApBE,6EAAH,qDAwBjB,OACE,cAAC,EAAD,CAAQvC,UAAWA,GAAa,yCAA0C4B,QAASY,EAAnF,SACGF,EAAa,eAAkBhC,GAAY,YChBnCuC,EA1BI,SAACC,GAClB,MAAyCrC,IAAjCC,EAAR,EAAQA,OAAQY,EAAhB,EAAgBA,YAAaD,EAA7B,EAA6BA,QAC7B,EAA8Be,oBAAS,GAAvC,mBAAOW,EAAP,KAAgBC,EAAhB,KACA,EAA8BZ,oBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAAmCd,mBAAS,GAA5C,mBAAOe,EAAP,KAAsBC,EAAtB,KAeA,OAbAC,qBAAU,WACH/B,GAEG,uCAAG,8BAAAmB,EAAA,sEACUa,MAAM,iBAAD,OAAkBjC,EAAlB,YAA6ByB,EAA7B,0BAAwDpC,EAAO6C,UAD9E,cACHC,EADG,gBAEUA,EAAKC,OAFf,OAEHC,EAFG,OAITV,EAAWU,EAAKX,SAChBG,GAAW,GALF,2CAAH,oDAORS,KACC,CAACrC,EAAaZ,EAAO6C,QAASlC,EAAS8B,IAEnC,CACLJ,UACAa,OAAQ,kBAAMR,EAAUS,KAAKC,QAC7Bb,YCvBSc,EACD,WADCA,EAEF,UAFEA,EAGH,SAgCKC,EA7BU,SAACjB,GACxB,MAA6CnC,mBAAQ,WACnD,IAAKmC,IAAYA,EAAQkB,WAAalB,EAAQkB,SAASC,OACrD,MAAO,CACL9C,OAAQ2C,GAIZ,IAAMI,EAAUpB,EAAQkB,SAAS,GAEjC,OAAI,IAAIJ,MAAU,IAAIA,KAAKM,EAAQC,cAC1B,CACLhD,OAAQ2C,GAGL,CACL3C,OAAQ2C,EACRM,WAAYF,EAAQE,WACpBD,aAAc,IAAIP,KAAKM,EAAQC,cAAcE,iBAE9C,CAACvB,IAEJ,MAAO,CACL3B,OAtBF,EAAQA,OAuBNiD,WAvBF,EAAgBA,WAwBdD,aAxBF,EAA4BA,eC2DfG,EAzDO,SAAC,GAAe,IAC9BzB,EAD6B,EAAZ0B,MACCC,OAAO3B,UAE/B,EAAwDV,oBAAS,GAAjE,mBAAOsC,EAAP,KAA6BC,EAA7B,KAEA,EAAqC9B,EAAWC,GAAxCC,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,QAASW,EAA1B,EAA0BA,OAE1B,EAA6CI,EAAiBjB,GAAtD3B,EAAR,EAAQA,OAAQiD,EAAhB,EAAgBA,WAAYD,EAA5B,EAA4BA,aAS5B,GAPAf,qBAAU,WACJqB,GAAwBL,IAC1BM,GAAwB,GACxBC,OAAOC,KAAKR,EAAY,aAEzB,CAACK,EAAsBL,IAEtBpB,EACF,OAAO,cAAC,EAAD,CAAMjD,UAAU,OAAhB,wBAGT,IAAK+C,EACH,OAAO,cAAC,EAAD,CAAM/C,UAAU,OAAhB,6BAQT,OACE,qBAAKA,UAAU,sBAAf,SACE,eAAC,EAAD,WACE,cAAC,EAAD,UAAQ+C,EAAQ+B,OAEhB,cAAC,EAAD,UACG1D,IAAW2C,EAAX,yEACoE,IAAIF,KAAKO,GAAeW,iBAD5F,KAEG3D,IAAW2C,EAA0B,yEACzC,qDAGF,sBAAK/D,UAAU,mCAAf,UACGoB,IAAW2C,EAAyB,KACnC,cAAC,EAAD,CAAQ9D,YAAU,EAACD,UAAU,OAAOgF,KAAMX,EAAYY,OAAO,SAASC,IAAI,sBAA1E,0BAIF,cAAC,EAAD,CAAgBlF,UAAU,OAAOkC,YAAaa,EAAQoC,aAAchD,cAvBtD,WACpBwC,GAAwB,GACxBf,KAqBM,SACGxC,IAAW2C,EAAyB,SAAW3C,IAAW2C,EAA0B,QAAU,oBC9B5FqB,EA1BW,WACxB,MAAgC3E,IAAxBC,EAAR,EAAQA,OAAQY,EAAhB,EAAgBA,YAChB,EAA4Bc,oBAAS,GAArC,mBAAOiD,EAAP,KAAeC,EAAf,KACA,EAA8BlD,oBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAAmCd,mBAAS,GAA5C,mBAAOe,EAAP,KAAsBC,EAAtB,KAeA,OAbAC,qBAAU,WACH/B,GAEG,uCAAG,8BAAAmB,EAAA,sEACUa,MAAM,0CAAD,OAA2C5C,EAAO6C,UADjE,cACHC,EADG,gBAEUA,EAAKC,OAFf,OAEHC,EAFG,OAIT4B,EAAU5B,EAAK6B,cACfrC,GAAW,GALF,2CAAH,oDAORS,KACC,CAACrC,EAAaZ,EAAO6C,QAASJ,IAE1B,CACLkC,SACAzB,OAAQ,kBAAMR,EAAUS,KAAKC,QAC7Bb,YCIWuC,EA1BK,WAClB,MAAyC/E,IAAjCC,EAAR,EAAQA,OAAQY,EAAhB,EAAgBA,YAAaD,EAA7B,EAA6BA,QAC7B,EAAgCe,oBAAS,GAAzC,mBAAOqD,EAAP,KAAiBC,EAAjB,KACA,EAA8BtD,oBAAS,GAAvC,mBAAOa,EAAP,KAAgBC,EAAhB,KACA,EAAmCd,mBAAS,GAA5C,mBAAOe,EAAP,KAAsBC,EAAtB,KAeA,OAbAC,qBAAU,WACH/B,GAEG,uCAAG,8BAAAmB,EAAA,sEACUa,MAAM,iBAAD,OAAkBjC,EAAlB,0BAA2CX,EAAO6C,UADjE,cACHC,EADG,gBAEUA,EAAKC,OAFf,OAEHC,EAFG,OAITgC,EAAYhC,EAAK+B,UACjBvC,GAAW,GALF,2CAAH,oDAORS,KACC,CAACrC,EAAaZ,EAAO6C,QAASlC,EAAS8B,IAEnC,CACLsC,WACA7B,OAAQ,kBAAMR,EAAUS,KAAKC,QAC7Bb,YCfE0C,EAAU,SAAC,GAAiC,IAA/B5C,EAA8B,EAA9BA,QAAS6C,EAAqB,EAArBA,eAC1B,EAA6C5B,EAAiBjB,GAAtD3B,EAAR,EAAQA,OAAQiD,EAAhB,EAAgBA,WAAYD,EAA5B,EAA4BA,aAE5B,OACE,+BACE,6BAAKrB,EAAQ+B,OACb,6BAAK1D,IACL,6BACGA,IAAW2C,EAAyB,KACnCK,IAGJ,+BACGhD,IAAW2C,EAAyB,KACnC,cAAC,EAAD,CAAQ9D,YAAU,EAAC+E,KAAMX,EAAYY,OAAO,SAASC,IAAI,sBAAsBlF,UAAU,8CAAzF,0BAEF,cAAC,EAAD,CAAgBkC,YAAaa,EAAQoC,aAAchD,cAAeyD,EAAlE,SACGxE,IAAW2C,EAAyB,SAAW3C,IAAW2C,EAA0B,QAAU,kBAuC1F8B,EAhCE,WACf,MAAsCL,IAA9BC,EAAR,EAAQA,SAAUxC,EAAlB,EAAkBA,QAASW,EAA3B,EAA2BA,OAE3B,OAAIX,EACK,cAAC,EAAD,CAAMjD,UAAU,OAAhB,wBAGJyF,EAASvB,OAKZ,qBAAKlE,UAAU,YAAf,SACE,kCACE,gCACE,+BACE,yCACA,mDACA,6CACA,8CAGJ,gCACGyF,EAASK,KAAI,SAAA/C,GAAO,OACnB,cAAC,EAAD,CAAS6C,eAAgBhC,EAAQb,QAASA,GAAcA,EAAQgD,cAhBjE,cAAC,EAAD,CAAM/F,UAAU,OAAhB,oE,QCsEIgG,EApGI,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,EAA2BxF,IAAnBC,EAAR,EAAQA,OAAQQ,EAAhB,EAAgBA,OAChB,EAAgCkB,mBAAS,MAAzC,mBAAO8D,EAAP,KAAiBC,EAAjB,KACA,EAA0B/D,mBAAS,MAAnC,mBAAOV,EAAP,KAAcW,EAAd,KACA,EAA4BD,oBAAS,GAArC,mBAAOgE,EAAP,KAAeC,EAAf,KAEAhD,qBAAU,WACR,GAAK6C,EAAL,CAEA,IAAMI,EAAWC,aAAY,kBAAMN,MAAgB,KAEnD,OAAO,WACLO,cAAcF,OAEf,CAACJ,IAEJ,IAAMO,EAAU,uCAAG,WAAOC,GAAP,yBAAAjE,EAAA,6DACjBiE,EAAEC,iBACFtE,EAAS,MACT8D,EAAY,MACZE,GAAU,GAJO,kBAMInF,EAAO0F,YAAP,qDANJ,cAMTC,EANS,iBAQIvD,MAAM,gCAAiC,CACxDwD,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBrD,KAAMsD,KAAKC,UAAU,CACnBC,cAAexG,EAAO6C,QACtBsD,WAfW,eAQTrD,EARS,iBAmB6BA,EAAKC,OAnBlC,iBAmBP0D,EAnBO,EAmBPA,QAASjB,EAnBF,EAmBEA,SAAUkB,EAnBZ,EAmBYA,OAE3BjB,EAAYD,GACPiB,GACH9E,EAASgF,cAAID,EAAQ,IAAK,2CAvBb,kDA0BfxE,QAAQlB,MAAR,MAEiB,OAAb,KAAI4F,KACNjF,EAAS,0BAETA,EAAS,0CA/BI,yBAkCfgE,GAAU,GAlCK,6EAAH,sDA6ChB,OACE,qBAAKrG,UAAU,sBAAf,SACE,eAAC,EAAD,WACE,cAAC,EAAD,CAAOA,UAAU,OAAjB,wCACA,eAAC,EAAD,mBAAYkG,EAAW,EAAI,EAA3B,WAEA,cAAC,EAAD,CAAMlG,UAAU,eAAhB,SACGkG,EAAQ,+IAGX,uBAAMqB,SAAUd,EAAhB,UACE,qBAAKzG,UAAU,wCAAf,SACGkG,EACC,qCACE,uBACE9F,KAAK,OACLoH,YAAY,+BACZC,MAAK,iBAAYvB,GAAY,IAC7BwB,UAAU,EACV1H,UAAU,sDACV2H,UAAU,IAEZ,cAAC,EAAD,CAAQ3H,UAAU,8DAA8D4B,QA7BxE,WACpB,IAAMgG,EAAG,uBACPC,mIAAYC,uBAAyB,eAD9B,kBAECC,mBAAmB7B,IAC7BtB,OAAOC,KAAK+C,EAAK,WAyBL,4BAKF,cAAC,EAAD,CAAQxH,KAAK,SAASJ,UAAU,+CAA+C0H,SAAUtB,EAAzF,SACGA,EAAS,aAAe,qBAI7B1E,EAAe,cAAC,EAAD,UAAYA,IAAnB,cCvFLsG,EAZG,WAChB,MAAoC5C,IAA5BC,EAAR,EAAQA,OAAQpC,EAAhB,EAAgBA,QAASW,EAAzB,EAAyBA,OAEzB,OACE,mCACGX,EACG,cAAC,EAAD,CAAMjD,UAAU,OAAhB,wBACAqF,EAAS,cAAC,EAAD,IAAe,cAAC,EAAD,CAAYY,aAAcrC,OCC7CqE,EAVI,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACpB,OAAKA,EAGH,qBAAKlI,UAAU,uDAAuDmI,MAAOD,EAA7E,SACE,eAAC,EAAD,CAAMlI,UAAU,OAAhB,UAAwBkI,EAAQE,OAAO,EAAG,GAA1C,MAAiDF,EAAQE,QAAQ,QAJhD,MCyBRC,EAtBA,WACb,IAAQ3H,EAAWD,IAAXC,OAEF8D,EAAQ8D,YAAc,KAE5B,OACE,sBAAKtI,UAAU,sEAAf,WACIwE,GAASA,EAAM+D,QAAU,KACzB,cAAC,IAAD,CAAMC,GAAG,IAAIxI,UAAU,OAAvB,oBAEF,cAAC,EAAD,CAAOA,UAAU,eAAjB,iCACA,sBAAKA,UAAU,4BAAf,UACE,cAAC,EAAD,CAAYkI,QAASxH,EAAO6C,UAC5B,cAAC,EAAD,CACEvD,UAAU,iFACV4B,QAAS,kBAAMlB,EAAO+H,SAFxB,+BCKFC,G,OAAM,WAGV,OAFwBjI,IAAhBa,YAON,qCACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAOqH,KAAK,sBAAsBC,UAAWrE,IAC7C,cAAC,IAAD,CAAOoE,KAAK,IAAIE,OAAK,EAACD,UAAWZ,OAP5B,cAAC,EAAD,MAYIc,EA5BG,WAChB,OACE,cAAC,IAAD,CACEzH,QAAS0H,SAASlB,mIAAYmB,UAAY,EAD5C,SAGE,cAAC,IAAD,UACE,cAAC,EAAD,SChBRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8bb2bc05.chunk.js","sourcesContent":["import React from 'react'\n\nconst Button = ({ className, linkButton, ...props }) => {\n  const linkCls = `block link-button rounded-md ease-in-out text-white focus:outline-none`\n  const btnCls = `block rounded-md ease-in-out text-white focus:outline-none`\n  const classList = `${linkButton ? linkCls : btnCls} ${className ? className : ''}`\n\n  if (linkButton) {\n    return (\n      <a className={classList} {...props} />\n    )\n  }\n\n  return (\n    <button\n      type=\"button\"\n      className={classList}\n      {...props}\n    />\n  )\n}\n\nexport default Button\n","import React from 'react'\n\nconst Card = ({ children }) => {\n  return (\n    <div className=\"w-full bg-white shadow-md rounded-lg p-4\">\n      {children}\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\n\nconst Title = ({ className, ...props }) => {\n  return (\n    <h1 \n      className={`font-bold text-center ${className}`}\n      {...props}\n    />\n  )\n}\n\nexport default Title\n","import React from 'react'\n\nconst Text = ({ className, ...props }) => {\n  return (\n    <p \n      className={`text-gray-400 text-center ${className}`}\n      {...props}\n    />\n  )\n}\n\nexport default Text\n","import { useMemo } from 'react'\n\nimport { useWallet } from 'use-wallet'\nimport { ethers } from 'ethers'\n\nconst useWeb3Wallet = () => {\n  const wallet = useWallet()\n\n  const { provider, signer } = useMemo(() => {\n    if (!wallet.ethereum) {\n      return {}\n    }\n\n    const provider = new ethers.providers.Web3Provider(wallet.ethereum)\n    const signer = provider.getSigner()\n\n    return {\n      provider,\n      signer\n    }\n  }, [wallet.status])\n\n  return {\n    provider,\n    signer,\n    wallet,\n    chainId: wallet && wallet.chainId,\n    isConnected: Boolean(wallet && wallet.status === 'connected')\n  }\n}\n\nexport default useWeb3Wallet\n","import React from 'react'\nimport Text from './Text'\n\nconst ErrorText = ({ className, ...props }) => {\n  return (\n    <Text\n      className={`text-red-700 ${className}`}\n      {...props}\n    />\n  )\n}\n\nexport default ErrorText\n","import React from 'react'\nimport Button from '../components/basic/Button'\nimport Card from '../components/basic/Card'\nimport Title from '../components/basic/Title'\nimport Text from '../components/basic/Text'\nimport useWeb3Wallet from '../utils/useWeb3Wallet'\nimport ErrorText from '../components/basic/ErrorText'\n\nconst ConnectWallet = () => {\n  const { wallet } = useWeb3Wallet()\n  return (\n    <div className=\"container md:w-2/6 my-20\">\n      <Title className=\"text-xl mb-6\">Telegram Unlock Bot</Title>\n      <Card>\n        <Title>Get Started</Title>\n        <Text>Connect your wallet to get started.</Text>\n\n        {!wallet.error ? null : (\n          <ErrorText>{wallet.error.message}</ErrorText>\n        )}\n\n        <Button onClick={() => wallet.connect()}>\n          Connect Wallet\n        </Button>\n      </Card>\n    </div>\n  )\n}\n\nexport default ConnectWallet\n","import React, { useState } from 'react'\n\nimport { WalletService } from '@unlock-protocol/unlock-js'\n\nimport useWeb3Wallet from '../utils/useWeb3Wallet'\nimport Button from './basic/Button'\n\nconst networks = {\n  4: {\n    provider: 'https://rinkeby.infura.io/v3/86c1641a6ce84463aa05b081494336d8',\n    unlockAddress: '0xd8c88be5e8eb88e38e6ff5ce186d764676012b0b',\n  },\n}\n\nconst PurchaseButton = ({ className, children, lockAddress, afterPurchase }) => {\n  const { provider, signer } = useWeb3Wallet()\n  const [error, setError] = useState('')\n  const [purchasing, setPurchasing] = useState(false)\n\n  const purchaseKey = async () => {\n    setPurchasing(true)\n    setError(null)\n\n    try {\n      const walletService = new WalletService(networks)\n  \n      await walletService.connect(provider, signer)\n  \n      await walletService.purchaseKey({\n        lockAddress\n      })\n\n      if (afterPurchase) {\n        afterPurchase()\n      }\n    } catch (err) {\n      console.error(err)\n      setError('Something went wrong')\n    } finally {\n      setPurchasing(false)\n    }\n  }\n\n  return (\n    <Button className={className || 'py-1 px-3 text-sm md:min-w-0 my-0 mx-2'} onClick={purchaseKey}>\n      {purchasing ? 'Unlocking...' : (children || 'Unlock')}\n    </Button>\n  )\n}\n\nexport default PurchaseButton\n","import { useEffect, useState } from 'react'\nimport useWeb3Wallet from './useWeb3Wallet'\n\nconst useChannel = (channelId) => {\n  const { wallet, isConnected, chainId } = useWeb3Wallet()\n  const [channel, setChannel] = useState(true)\n  const [loading, setLoading] = useState(true)\n  const [reloadCounter, setReload] = useState(0)\n\n  useEffect(() => {\n    if (!isConnected) return\n\n    const go = async () => {\n      const resp = await fetch(`/api/channels/${chainId}/${channelId}?walletAddress=${wallet.account}`)\n      const body = await resp.json()\n\n      setChannel(body.channel)\n      setLoading(false)\n    }\n    go()\n  }, [isConnected, wallet.account, chainId, reloadCounter])\n\n  return {\n    channel,\n    reload: () => setReload(Date.now()),\n    loading\n  }\n}\n\nexport default useChannel\n","import { useMemo } from 'react'\n\nexport const ChannelStatuses = {\n  Inactive: 'Inactive',\n  Expired: 'Expired',\n  Active: 'Active'\n}\n\nconst useChannelStatus = (channel) => {\n  const { status, inviteLink, keyExpiresAt } = useMemo(() => {\n    if (!channel || !channel.UserKeys || !channel.UserKeys.length) {\n      return {\n        status: ChannelStatuses.Inactive\n      }\n    }\n\n    const userKey = channel.UserKeys[0]\n\n    if (new Date() >= new Date(userKey.keyExpiresAt)) {\n      return {\n        status: ChannelStatuses.Expired\n      }\n    }\n    return {\n      status: ChannelStatuses.Active,\n      inviteLink: userKey.inviteLink,\n      keyExpiresAt: new Date(userKey.keyExpiresAt).toISOString()\n    }\n  }, [channel])\n\n  return {\n    status,\n    inviteLink,\n    keyExpiresAt\n  }\n}\n\nexport default useChannelStatus","import React, { useEffect, useState } from 'react'\nimport Card from '../components/basic/Card'\nimport Text from '../components/basic/Text'\nimport Title from '../components/basic/Title'\nimport Button from '../components/basic/Button'\nimport PurchaseButton from '../components/PurchaseButton'\n\nimport useChannel from '../utils/useChannel'\nimport useChannelStatus from '../utils/useChannelStatus'\nimport { ChannelStatuses } from '../utils/useChannelStatus'\n\nconst ChannelDetail = ({ match }) => {\n  const channelId = match.params.channelId\n\n  const [shouldOpenInviteLink, setShouldOpenInviteLink] = useState(false)\n  \n  const { channel, loading, reload } = useChannel(channelId)\n\n  const { status, inviteLink, keyExpiresAt } = useChannelStatus(channel)\n\n  useEffect(() => {\n    if (shouldOpenInviteLink && inviteLink) {\n      setShouldOpenInviteLink(false)\n      window.open(inviteLink, '_blank')\n    }\n  }, [shouldOpenInviteLink, inviteLink])\n\n  if (loading) {\n    return <Text className=\"my-3\">Loading...</Text> \n  }\n\n  if (!channel) {\n    return <Text className=\"my-3\">Invalid channel</Text> \n  }\n\n  const afterPurchase = () => {\n    setShouldOpenInviteLink(true)\n    reload()\n  }\n\n  return (\n    <div className=\"container px-8 py-4\">\n      <Card>\n        <Title>{channel.name}</Title>\n\n        <Text>\n          {status === ChannelStatuses.Active ? (\n            `You have an active subscription to the channel that expires on ${(new Date(keyExpiresAt)).toLocaleString()}.`\n          ) : status === ChannelStatuses.Expired ? 'Your subscription to the channel has expired. Renew it to gain access.' : \n          'Get an unlock key to gain access to the channel.'}\n        </Text>\n\n        <div className=\"flex items-center justify-center\">\n          {status !== ChannelStatuses.Active ? null : (\n            <Button linkButton className=\"mx-2\" href={inviteLink} target=\"_blank\" rel=\"noopener noreferrer\">\n              Join Channel\n            </Button>\n          )}\n          <PurchaseButton className=\"mx-2\" lockAddress={channel.lockContract} afterPurchase={afterPurchase}>\n            {status === ChannelStatuses.Active ? 'Extend' : status === ChannelStatuses.Expired ? 'Renew' : 'Unlock'}\n          </PurchaseButton>\n        </div>\n      </Card>\n\n    </div>\n  )\n}\n\nexport default ChannelDetail\n","import { useEffect, useState } from 'react'\nimport useWeb3Wallet from './useWeb3Wallet'\n\nconst useIsWalletLinked = () => {\n  const { wallet, isConnected } = useWeb3Wallet()\n  const [linked, setLinked] = useState(true)\n  const [loading, setLoading] = useState(true)\n  const [reloadCounter, setReload] = useState(0)\n\n  useEffect(() => {\n    if (!isConnected) return\n\n    const go = async () => {\n      const resp = await fetch(`/api/users/wallet-status?walletAddress=${wallet.account}`)\n      const body = await resp.json()\n\n      setLinked(body.walletLinked)\n      setLoading(false)\n    }\n    go()\n  }, [isConnected, wallet.account, reloadCounter])\n\n  return {\n    linked,\n    reload: () => setReload(Date.now()),\n    loading\n  }\n}\n\nexport default useIsWalletLinked\n","import { useEffect, useState } from 'react'\nimport useWeb3Wallet from './useWeb3Wallet'\n\nconst useChannels = () => {\n  const { wallet, isConnected, chainId } = useWeb3Wallet()\n  const [channels, setChannels] = useState(true)\n  const [loading, setLoading] = useState(true)\n  const [reloadCounter, setReload] = useState(0)\n\n  useEffect(() => {\n    if (!isConnected) return\n\n    const go = async () => {\n      const resp = await fetch(`/api/channels/${chainId}?walletAddress=${wallet.account}`)\n      const body = await resp.json()\n\n      setChannels(body.channels)\n      setLoading(false)\n    }\n    go()\n  }, [isConnected, wallet.account, chainId, reloadCounter])\n\n  return {\n    channels,\n    reload: () => setReload(Date.now()),\n    loading\n  }\n}\n\nexport default useChannels\n","import React, { useMemo } from 'react'\n\nimport useChannels from '../utils/useChannels'\nimport Text from '../components/basic/Text'\nimport PurchaseButton from '../components/PurchaseButton'\nimport Button from '../components/basic/Button'\nimport useChannelStatus from '../utils/useChannelStatus'\nimport { ChannelStatuses } from '../utils/useChannelStatus'\n\n\nconst Channel = ({ channel, reloadChannels }) => {\n  const { status, inviteLink, keyExpiresAt } = useChannelStatus(channel)\n\n  return (\n    <tr>\n      <td>{channel.name}</td>\n      <td>{status}</td>\n      <td>\n        {status !== ChannelStatuses.Active ? null : (\n          keyExpiresAt\n        )}\n      </td>\n      <td>\n        {status !== ChannelStatuses.Active ? null : (\n          <Button linkButton href={inviteLink} target=\"_blank\" rel=\"noreferrer noopener\" className=\"py-1 px-3 text-sm md:min-w-0 my-0 mr-2 ml-0\">Join Channel</Button>\n        )}\n        <PurchaseButton lockAddress={channel.lockContract} afterPurchase={reloadChannels}>\n          {status === ChannelStatuses.Active ? 'Extend' : status === ChannelStatuses.Expired ? 'Renew' : 'Unlock'}\n        </PurchaseButton>\n      </td>\n    </tr>\n  )\n}\n\nconst Channels = () => {\n  const { channels, loading, reload } = useChannels()\n\n  if (loading) {\n    return <Text className=\"my-3\">Loading...</Text> \n  }\n\n  if (!channels.length) {\n    return <Text className=\"my-3\">You have no active/expired unlock keys to any channel</Text> \n  }\n\n  return (\n    <div className=\"container\">\n      <table>\n        <thead>\n          <tr>\n            <td>Channel</td>\n            <td>Membership Status</td>\n            <td>Expiry Date</td>\n            <td>Actions</td>\n          </tr>\n        </thead>\n        <tbody>\n          {channels.map(channel => (\n            <Channel reloadChannels={reload} channel={channel} key={channel.id} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default Channels\n","import React, { useEffect, useState } from 'react'\n\nimport { get } from 'lodash/get'\n\nimport Button from '../components/basic/Button'\nimport Card from '../components/basic/Card'\nimport ErrorText from '../components/basic/ErrorText'\n\nimport Text from '../components/basic/Text'\nimport Title from '../components/basic/Title'\nimport useWeb3Wallet from '../utils/useWeb3Wallet'\n\nconst LinkWallet = ({ reloadStatus }) => {\n  const { wallet, signer } = useWeb3Wallet()\n  const [linkCode, setLinkCode] = useState(null)\n  const [error, setError] = useState(null)\n  const [saving, setSaving] = useState(false)\n\n  useEffect(() => {\n    if (!linkCode) return\n\n    const interval = setInterval(() => reloadStatus(), 3000)\n\n    return () => {\n      clearInterval(interval)\n    }\n  }, [linkCode])\n\n  const linkWallet = async (e) => {\n    e.preventDefault()\n    setError(null)\n    setLinkCode(null)\n    setSaving(true)\n    try {\n      const sign = await signer.signMessage(`I want to use this wallet for Telegram Unlock Bot`)\n  \n      const resp = await fetch('/api/users/generate-link-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          walletAddress: wallet.account,\n          sign\n        })\n      })\n\n      const { success, linkCode, errors } = await resp.json()\n\n      setLinkCode(linkCode)\n      if (!success) {\n        setError(get(errors, '0', 'Failed to link your account, try again'))\n      }\n    } catch (err) {\n      console.error(err)\n\n      if (err.code === 4001) {\n        setError(`Message wasn't signed.`)\n      } else {\n        setError('Failed to link your account, try again')\n      }\n    } finally {\n      setSaving(false)\n    }\n  }\n  \n  const openBotWindow = () => {\n    const url = `https://t.me/${\n      process.env.TELEGRAM_BOT_USERNAME || 'UnlockDevBot'\n    }?start=${encodeURIComponent(linkCode)}`\n    window.open(url, '_blank')\n  }\n\n  return (\n    <div className=\"container px-8 py-4\">\n      <Card>\n        <Title className=\"mb-1\">Link your Telegram account</Title>\n        <Text>Step {linkCode ? 2 : 1} of 2</Text>\n\n        <Text className=\"text-lg mt-3\">\n          {linkCode ? `Send the following message to the Unlock Bot to complete verification` : `Sign a message with your wallet to verify that you own the wallet.`}\n        </Text>\n\n        <form onSubmit={linkWallet}>\n          <div className=\"flex items-center justify-center mb-2\">\n            {linkCode ? (\n              <>\n                <input \n                  type=\"text\" \n                  placeholder=\"Enter your Telegram username\" \n                  value={`/start ${linkCode || ''}`}\n                  disabled={true} \n                  className=\"inline-block mx-0 rounded-r-none focus:outline-none\"\n                  required={true}\n                />\n                <Button className=\"m-0 py-2 px-2 rounded-l-none border min-w-0 border-blue-400\" onClick={openBotWindow}>\n                  Message bot\n                </Button>\n              </>\n            ) : (\n              <Button type=\"submit\" className=\"m-0 py-2 px-2 border min-w-0 border-blue-400\" disabled={saving}>\n                {saving ? 'Linking...' : 'Sign a message'}\n              </Button>\n            )}\n          </div>\n          {!error ? null : <ErrorText>{error}</ErrorText>}\n        </form>\n      </Card>\n    </div>\n  )\n}\n\nexport default LinkWallet\n","import React from 'react'\nimport Text from '../components/basic/Text'\nimport useIsWalletLinked from '../utils/useIsWalletLinked'\nimport Channels from './Channels'\nimport LinkWallet from './LinkWallet'\n\nconst Dashboard = () => {\n  const { linked, loading, reload } = useIsWalletLinked()\n\n  return (\n    <>\n      {loading \n        ? <Text className=\"my-3\">Loading...</Text> \n        : linked ? <Channels /> : <LinkWallet reloadStatus={reload} />}\n    </>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\n\nimport Text from './Text'\n\nconst ETHAddress = ({ address }) => {\n  if (!address) return null\n\n  return (\n    <div className=\"rounded-2xl py-1 px-3 text-sm border border-gray-400\" title={address}>\n      <Text className=\"mb-0\">{address.substr(0, 6)}...{address.substr(-4)}</Text>\n    </div>\n  )\n}\n\nexport default ETHAddress\n","import React from 'react'\nimport useWeb3Wallet from '../utils/useWeb3Wallet'\nimport Button from './basic/Button'\nimport ETHAddress from './basic/ETHAddress'\nimport Title from './basic/Title'\n\nimport { useRouteMatch, Link } from 'react-router-dom'\n\nconst Header = () => {\n  const { wallet } = useWeb3Wallet()\n\n  const match = useRouteMatch('/')\n\n  return (\n    <div className=\"container flex items-center py-5 border-b border-gray-200 mb-5 px-3\">\n      {!match || match.isExact ? null : (\n        <Link to=\"/\" className=\"mr-3\">&larr;</Link>\n      )}\n      <Title className=\"text-xl mb-0\">Telegram Unlock Bot</Title>\n      <div className=\"ml-auto flex items-center\">\n        <ETHAddress address={wallet.account} />\n        <Button \n          className=\"bg-red-400 hover:bg-red-500 py-1 px-3 text-sm md:min-w-0 ml-3 mt-0 rounded-2xl\"\n          onClick={() => wallet.reset()}\n        >Disconnect</Button>\n      </div>\n    </div>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport { UseWalletProvider } from 'use-wallet'\n\nimport { Route, HashRouter } from 'react-router-dom'\n\nimport ConnectWallet from './pages/ConnectWallet'\nimport ChannelDetail from './pages/ChannelDetail'\nimport Dashboard from './pages/Dashboard'\n\nimport Header from './components/Header'\n\nimport './tailwind.css'\nimport useWeb3Wallet from './utils/useWeb3Wallet'\n\nconst Providers = () => {\n  return (\n    <UseWalletProvider\n      chainId={parseInt(process.env.NETWORK) || 4}\n    >\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </UseWalletProvider>\n  )\n}\n\nconst App = () => {\n  const { isConnected } = useWeb3Wallet()\n\n  if (!isConnected) {\n    return <ConnectWallet />\n  }\n\n  return (\n    <>\n      <Header />\n      <Route path=\"/channel/:channelId\" component={ChannelDetail} />\n      <Route path=\"/\" exact component={Dashboard} />\n    </>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}